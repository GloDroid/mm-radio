//! # DBus interface proxy for: `org.freedesktop.ModemManager1.Bearer`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `org.freedesktop.ModemManager1.Bearer.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(
    default_service = "org.freedesktop.ModemManager1",
    interface = "org.freedesktop.ModemManager1.Bearer",
    assume_defaults = true,
    gen_blocking = false
)]
trait Bearer {
    /// Connect method
    fn connect(&self) -> zbus::Result<()>;

    /// Disconnect method
    fn disconnect(&self) -> zbus::Result<()>;

    /// BearerType property
    #[dbus_proxy(property)]
    fn bearer_type(&self) -> zbus::Result<u32>;

    /// Connected property
    #[dbus_proxy(property)]
    fn connected(&self) -> zbus::Result<bool>;

    /// ConnectionError property
    #[dbus_proxy(property)]
    fn connection_error(&self) -> zbus::Result<(String, String)>;

    /// Interface property
    #[dbus_proxy(property)]
    fn interface(&self) -> zbus::Result<String>;

    /// Ip4Config property
    #[dbus_proxy(property)]
    fn ip4_config(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Ip6Config property
    #[dbus_proxy(property)]
    fn ip6_config(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// IpTimeout property
    #[dbus_proxy(property)]
    fn ip_timeout(&self) -> zbus::Result<u32>;

    /// Multiplexed property
    #[dbus_proxy(property)]
    fn multiplexed(&self) -> zbus::Result<bool>;

    /// ProfileId property
    #[dbus_proxy(property)]
    fn profile_id(&self) -> zbus::Result<i32>;

    /// Properties property
    #[dbus_proxy(property)]
    fn properties(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// ReloadStatsSupported property
    #[dbus_proxy(property)]
    fn reload_stats_supported(&self) -> zbus::Result<bool>;

    /// Stats property
    #[dbus_proxy(property)]
    fn stats(&self) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Suspended property
    #[dbus_proxy(property)]
    fn suspended(&self) -> zbus::Result<bool>;
}
