//! # DBus interface proxy for: `org.freedesktop.ModemManager1.Modem.Contacts`
//!
//! This code was generated by `zbus-xmlgen` `3.1.0` from DBus introspection data.
//! Source: `wip-org.freedesktop.ModemManager1.Modem.Contacts.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(
    default_service = "org.freedesktop.ModemManager1",
    interface = "org.freedesktop.ModemManager1.Modem.Contacts",
    assume_defaults = true,
    gen_blocking = false
)]
trait Contacts {
    /// Add method
    fn add(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<u32>;

    /// Delete method
    fn delete(&self, index: u32) -> zbus::Result<()>;

    /// Find method
    fn find(
        &self,
        pattern: &str,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// Get method
    fn get(
        &self,
        index: u32,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// GetCount method
    fn get_count(&self) -> zbus::Result<u32>;

    /// List method
    fn list(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// Added signal
    #[dbus_proxy(signal)]
    fn added(
        &self,
        index: u32,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Deleted signal
    #[dbus_proxy(signal)]
    fn deleted(&self, index: u32) -> zbus::Result<()>;
}
